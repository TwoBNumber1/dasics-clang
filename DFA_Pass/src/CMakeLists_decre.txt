cmake_minimum_required(VERSION 3.10)
project(SVF)

# 设置 C++ 标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

#===============================================================================
# SANITY CHECK
#===============================================================================
set(LT_LLVM_INSTALL_DIR $ENV{LLVM_DIR} CACHE PATH "LLVM installation directory")

#===============================================================================
# lOAD LLVM CONFIGURATION
#===============================================================================
list(APPEND CMAKE_PREFIX_PATH "${LT_LLVM_INSTALL_DIR}/lib/cmake/llvm/")

find_package(LLVM REQUIRED CONFIG)
message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LT_LLVM_INSTALL_DIR}")

# Set the LLVM header and library paths
# 设置包含目录，包含 SVF 和 LLVM
get_filename_component(PARENT_DIR ../ ABSOLUTE)
include_directories(SYSTEM ${LLVM_INCLUDE_DIRS})
link_directories(${LLVM_LIBRARY_DIRS})
add_definitions(${LLVM_DEFINITIONS})

set(SVF_DIR2 /home/chengyue/MacroGuard/SVF)
include_directories(${SVF_ROOT_DIR}/svf/include)
include_directories(${SVF_ROOT_DIR}/svf-llvm/include)
include_directories(${SVF_ROOT_DIR}/Release-build/include)

# Include subdirectories. 
add_subdirectory(../SVF SVF)

# 打印 LLVM 版本
message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

#===============================================================================
# ADD THE TARGET
#===============================================================================

add_library(SVFAnalysisPass MODULE svf_analysis_pass.cpp)

target_link_libraries(SVFAnalysisPass PUBLIC
    "${SVF_DIR2}/Release-build/lib/libSvfLLVM.so" 
    "${SVF_DIR2}/Release-build/lib/libSvfCore.so"
)                  



# cmake_minimum_required(VERSION 3.10)
# project(SVFAnalysisPass)

# # 设置 C++ 标准
# set(CMAKE_CXX_STANDARD 17)
# set(CMAKE_CXX_STANDARD_REQUIRED ON)

# # 找到 LLVM
# find_package(LLVM REQUIRED CONFIG)

# # 设置 LLVM 相关的目录
# include_directories(${LLVM_INCLUDE_DIRS})
# add_definitions(${LLVM_DEFINITIONS})

# # 设置SVF include
# set(SVF_DIR2 /home/chengyue/MacroGuard/SVF)
# include_directories(${SVF_DIR2}/Release-build/include)
# include_directories(${SVF_DIR2}/svf-llvm/include)
# include_directories(${SVF_DIR2}/svf/include)


# # 添加编译目标
# add_library(SVFAnalysisPass MODULE svf_analysis_pass.cpp)

# # 链接必要的库
# # "${SVF_DIR2}/Release-build/lib/libSvfLLVM.so"
# target_link_libraries(SVFAnalysisPass PRIVATE "${SVF_DIR2}/Release-build/lib/libSvfLLVM.so" 
#    "${SVF_DIR2}/Release-build/lib/libSvfCore.so") 


# # 设置插件属性
# set_target_properties(SVFAnalysisPass PROPERTIES
#   COMPILE_FLAGS "-fno-rtti -fPIC"
# )



# # 打印 LLVM 版本
# message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
# message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")



# 设置SVF的路径

# # link_directories(${SVF_DIR2}/svf/lib)
# # link_directories(${SVF_DIR2}/svf-llvm/lib)
# # link_directories(${SVF_DIR2}/Release-build/lib)

# # 设置LLVM的路径
# find_package(LLVM REQUIRED CONFIG)
# include_directories(${LLVM_INCLUDE_DIRS})
# # link_directories(${LLVM_LIBRARY_DIRS})
# # add_definitions(${LLVM_DEFINITIONS})
# # list(APPEND CMAKE_MODULE_PATH "${SVF_DIR2}/llvm-16.0.0.obj")

# # 添加SVF依赖库
# add_library(SVFAnalysisPass MODULE svf_analysis_pass.cpp)




